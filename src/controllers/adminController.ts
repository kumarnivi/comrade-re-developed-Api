import { Request, Response } from "express";
import ComradeUser from "../models/user.model";
import crypto from "crypto";
import bcrypt from "bcryptjs";
import sendEmail from "../utils/email"; // Utility function to send emails

// Approve a user as an admin (Super Admin Only)
export const approveAdmin = async (req: any, res: any) => {
  try {
    const { userId } = req.params;
    const superAdmin = await ComradeUser.findOne({
      where: { id: req.user.id, role: "superAdmin" },
    });

    if (!superAdmin) {
      return res.status(403).json({ message: "Access denied. Only Super Admin can approve admins." });
    }

    const user = await ComradeUser.findByPk(userId);
    if (!user) return res.status(404).json({ message: "User not found." });

    // Generate a random password
    const randomPassword = crypto.randomBytes(8).toString("hex");

    // Hash the password
    const hashedPassword = await bcrypt.hash(randomPassword, 10);

    // Update the user role & approval status
    await user.update({ role: "admin", isApproved: true, password: hashedPassword });

    // Send the autogenerated password via email
    await sendEmail(user.email, "Your Admin Access Approved", `Your new password: ${randomPassword}`);

    res.json({ message: "User approved as Admin. Login credentials sent via email." });
  } catch (error) {
    res.status(500).json({ message: "Internal Server Error", error });
  }
};

// Change Password
export const changePassword = async (req: any, res: any) => {
  try {
    const { oldPassword, newPassword } = req.body;
    const user = await ComradeUser.findByPk(req.user.id);

    if (!user) return res.status(404).json({ message: "User not found." });

    // Check if old password is correct
    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) return res.status(400).json({ message: "Incorrect old password." });

    // Update password
    const hashedNewPassword = await bcrypt.hash(newPassword, 10);
    await user.update({ password: hashedNewPassword });

    res.json({ message: "Password changed successfully." });
  } catch (error) {
    res.status(500).json({ message: "Internal Server Error", error });
  }
};
