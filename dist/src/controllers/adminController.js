"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.changePassword = exports.approveAdmin = void 0;
const user_model_1 = __importDefault(require("../models/user.model"));
const crypto_1 = __importDefault(require("crypto"));
const bcrypt_1 = __importDefault(require("bcrypt"));
const email_1 = __importDefault(require("../utils/email")); // Utility function to send emails
// Approve a user as an admin (Super Admin Only)
const approveAdmin = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { userId } = req.params;
        const superAdmin = yield user_model_1.default.findOne({
            where: { id: req.user.id, role: "superAdmin" },
        });
        if (!superAdmin) {
            return res.status(403).json({ message: "Access denied. Only Super Admin can approve admins." });
        }
        const user = yield user_model_1.default.findByPk(userId);
        if (!user)
            return res.status(404).json({ message: "User not found." });
        // Generate a random password
        const randomPassword = crypto_1.default.randomBytes(8).toString("hex");
        // Hash the password
        const hashedPassword = yield bcrypt_1.default.hash(randomPassword, 10);
        // Update the user role & approval status
        yield user.update({ role: "admin", isApproved: true, password: hashedPassword });
        // Send the autogenerated password via email
        yield (0, email_1.default)(user.email, "Your Admin Access Approved", `Your new password: ${randomPassword}`);
        res.json({ message: "User approved as Admin. Login credentials sent via email." });
    }
    catch (error) {
        res.status(500).json({ message: "Internal Server Error", error });
    }
});
exports.approveAdmin = approveAdmin;
// Change Password
const changePassword = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { oldPassword, newPassword } = req.body;
        const user = yield user_model_1.default.findByPk(req.user.id);
        if (!user)
            return res.status(404).json({ message: "User not found." });
        // Check if old password is correct
        const isMatch = yield bcrypt_1.default.compare(oldPassword, user.password);
        if (!isMatch)
            return res.status(400).json({ message: "Incorrect old password." });
        // Update password
        const hashedNewPassword = yield bcrypt_1.default.hash(newPassword, 10);
        yield user.update({ password: hashedNewPassword });
        res.json({ message: "Password changed successfully." });
    }
    catch (error) {
        res.status(500).json({ message: "Internal Server Error", error });
    }
});
exports.changePassword = changePassword;
